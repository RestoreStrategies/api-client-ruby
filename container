#!/bin/bash

# Name of image & container.
image_name='forthecity-client-ruby'
container_name='forthecity-client-ruby'

# Make environment variables available
source env.sh

# Build docker image based on Dockerfile, if creating or starting container.
if [ "$1" = "-c" ]; then
	echo "Building $image_name image..."
	docker build -t "$image_name" .
fi

# -h
# Print help.
if [ "$1" = "-h" ]; then
	help_output= cat <<HelpText
APP DOCKER MANAGER

This script manages Docker for this application. It may need to be run as
the root user on your system. The create, test, start & restart flags attempt
to build or rebuild the image based on the Dockerfile before executing.

ARGUMENTS

	-h
	 	Prints help text.

	-c
		Creates an image based the Dockerfile.

	-t
		Runs the test suite for the application.

	--interactive
		Runs an interactive container.

	--status
		Shows status of the container.
HelpText

	echo $help_output
fi

# -c
# Creates & runs the container.
if [ "$1" = "-c" ]; then
	echo "Creating $containter_name image"
fi

# -t
# Run tests.
if [ "$1" = "-t" ]; then
	docker run --rm -t -v $PWD:/opt/app -e HOST=$HOST -e PORT=$PORT \
	-e TOKEN=$TOKEN -e SECRET=$SECRET --link forthecity-api:api \
	$image_name /bin/bash -c \
	"bundle exec rspec; bundle exec rubocop --require rubocop-rspec"
fi

# --interactive
# Run interactive container
if [ "$1" = "--interactive" ]; then
	docker run --rm -i -t -v $PWD:/opt/app -e HOST=$HOST -e PORT=$PORT \
	-e TOKEN=$TOKEN -e SECRET=$SECRET \
	--link forthecity-api:api $image_name /bin/bash
fi

# --status
# Shows status.
if [ "$1" = "--status" ]; then
	docker ps -a --filter "name=$container_name"
fi
